# Automate Terraform infrastructure builds into AWS using GitHub Actions.
# This workflow applies changes when a pull request to the main branch is merged and has a 'dev' label.

# Workflow name
name: Deploy Terraform Infrastructure to AWS

# Define workflow trigger
on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

# Define variables, so that they can be reused. The variable are stored as GitHub secrets.
env:
  OIDC_ROLE: ${{ secrets.GITHUBACTIONSROLE }}
  AWS_ACCOUNT_ID: ${{ secrets.ACCOUNT }}
  ENV_VAR: dev

# Define the steps for the job.
jobs:
  terraform:
    name: Terraform-Apply
    runs-on: ubuntu-latest
    environment: AWS
    if: github.event.pull_request.merged == true && contains(join(github.event.pull_request.labels.*.name, ','), 'dev')

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

        # OIDC - To get temporary credentials from AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.OIDC_ROLE }}
          aws-region: us-east-1

        # Sets up Terraform CLI version 1.6.6 in the GitHub Actions runner using the official HashiCorp action.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init -backend-config="key=simple-log-service-infra/${ENV_VAR}/terraform.tfstate"

      - name: Select Dev Workspace
        run: terraform workspace select dev || terraform workspace new dev

      # Sync state with actual infrastructure
      - name: Terraform Refresh
        run: terraform refresh

      # terraform fix format
      - name: Terraform format
        run: terraform fmt -recursive

      # check terraform formatting 
      - name: Terraform Format Check
        run: terraform fmt -check

      # Checks syntax and internal consistency.
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
